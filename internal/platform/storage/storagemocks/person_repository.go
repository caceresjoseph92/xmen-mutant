// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package storagemocks

import (
	context "context"
	xmen "xmen-mutant/internal"

	mock "github.com/stretchr/testify/mock"
)

// PersonRepository is an autogenerated mock type for the PersonRepository type
type PersonRepository struct {
	mock.Mock
}

// Consult provides a mock function with given fields: ctx, args
func (_m *PersonRepository) Consult(ctx context.Context, args map[string]interface{}) (map[string]interface{}, error) {
	ret := _m.Called(ctx, args)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(context.Context, map[string]interface{}) map[string]interface{}); ok {
		r0 = rf(ctx, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, map[string]interface{}) error); ok {
		r1 = rf(ctx, args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, person
func (_m *PersonRepository) Save(ctx context.Context, person xmen.Person) (map[string]interface{}, error) {
	ret := _m.Called(ctx, person)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(context.Context, xmen.Person) map[string]interface{}); ok {
		r0 = rf(ctx, person)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, xmen.Person) error); ok {
		r1 = rf(ctx, person)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
